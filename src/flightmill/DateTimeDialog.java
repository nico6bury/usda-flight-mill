/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package flightmill;

import java.time.LocalDateTime;

import javax.swing.JOptionPane;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePickerSettings;

/**
 *
 * @author Nicholas.Sixbury
 */
public class DateTimeDialog extends javax.swing.JDialog {

    DateTimePicker dtPicker = new DateTimePicker();

    /**
     * Creates new form DateTimeDialog
     */
    public DateTimeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // set setttings for date time picker
        // DatePickerSettings dateSettings = new DatePickerSettings();
        // TimePickerSettings timeSettings = new TimePickerSettings();
        // timeSettings.setAllowKeyboardEditing(true);
        // timeSettings.setDisplaySpinnerButtons(true);
        // timeSettings.setDisplayToggleTimeMenuButton(true);
        // timeSettings.setInitialTimeToNow();
        // uxDateTimePicker = new DateTimePicker(dateSettings, timeSettings);
        // uxDateTimePicker.setFont(new java.awt.Font("Segoe UI", 0, 18));
        // uxDateTimePicker.setDateTimeStrict(LocalDateTime.now());
    }//end constructor

    public LocalDateTime dateTime = LocalDateTime.now();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DatePickerSettings dateSettings = new DatePickerSettings();
        TimePickerSettings timeSettings = new TimePickerSettings();
        timeSettings.setAllowKeyboardEditing(true);
        timeSettings.setDisplaySpinnerButtons(true);
        timeSettings.setDisplayToggleTimeMenuButton(true);
        timeSettings.setInitialTimeToNow();
        uxDateTimePicker = new DateTimePicker(dateSettings, timeSettings);
        ;
        uxCancelConfigBtn = new javax.swing.JButton();
        uxConfirmConfigBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Date Time Dialog Chooser");
        setModal(true);

        uxDateTimePicker.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        uxCancelConfigBtn.setText("Cancel");
        uxCancelConfigBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uxCancelConfigBtnActionPerformed(evt);
            }
        });

        uxConfirmConfigBtn.setText("Confirm");
        uxConfirmConfigBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uxConfirmConfigBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(uxDateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uxCancelConfigBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uxConfirmConfigBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uxDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uxCancelConfigBtn)
                    .addComponent(uxConfirmConfigBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uxCancelConfigBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uxCancelConfigBtnActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_uxCancelConfigBtnActionPerformed

    private void uxConfirmConfigBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uxConfirmConfigBtnActionPerformed
        uxDateTimePicker.validate();
        LocalDateTime tempDateTime = uxDateTimePicker.getDateTimePermissive();
        if ( tempDateTime == null ) {
            JOptionPane.showMessageDialog(this, "Date and/or Time chosen were invalid.\nIgnoring Selection...");
        }//end if we couldn't get valid time from DateTimePicker
        else { dateTime = tempDateTime; }
        // close this dialog window
        this.setVisible(false);
    }//GEN-LAST:event_uxConfirmConfigBtnActionPerformed

    public void updateDateTime() {
        uxDateTimePicker.setDateTimePermissive(dateTime);
    }//end updateDateTime()

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DateTimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DateTimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DateTimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DateTimeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DateTimeDialog dialog = new DateTimeDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }//end main method

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton uxCancelConfigBtn;
    private javax.swing.JButton uxConfirmConfigBtn;
    private com.github.lgooddatepicker.components.DateTimePicker uxDateTimePicker;
    // End of variables declaration//GEN-END:variables
}//end class DateTimeDialog
